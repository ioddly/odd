// init.odd - Basic language functionality
[module [odd core]]

def(not lambda(x) {
  =(x #f)
})

defsyntax(let x e) {
  // let(x 1) { x } => [[lambda [x] x] 1]
  syntax-assert(x "Expected exactly 3 arguments to let" =(length(x) 4))

  def(name list-ref(x 1))
  def(value list-ref(x 2))
  def(body list-ref(x 3))

  syntax-assert(x "Expected first argument to let to be a symbol" symbol?(name))

  def(ret list(list('lambda name synclo(e body list(name))) synclo(e value)))
  print(ret)
  ret
}

def(qq-list lambda(lst) {
  if(pair?(lst)) {
    
  } {

  }
})

def(quasiquote let(x 777) { x })

print(quasiquote)

[export not let quasiquote]
